Class CNA.Examples.GraphViz Extends %RegisteredObject
{

Property gvc As %String [ Private ];

Property cgraph As %String [ Private ];

Method %OnNew(CNAPath As %String, gvcPath As %String, cgraphPath As %String) As %Status [ Private ]
{
	try {
		if (('$data(CNAPath)) || ('##class(%File).Exists(CNAPath))) {
			return $$$ERROR("CNA file doesn't exists")	
		}
		if (('$data(gvcPath)) || ('##class(%File).Exists(gvcPath))) {
			return $$$ERROR("gvc file doesn't exists")	
		}
		if (('$data(cgraphPath)) || ('##class(%File).Exists(cgraphPath))) {
			return $$$ERROR("cgraph file doesn't exists")	
		}
		
		set ..gvc = ##class(CNA.CNA).%New(CNAPath)
		set ..cgraph = ##class(CNA.CNA).%New(CNAPath)

		do ..gvc.LoadLibrary(gvcPath)
		do ..cgraph.LoadLibrary(cgraphPath)
	} catch ex {
		do ex.Log()
		return ex.AsStatus()
	}
	
	Quit $$$OK
}

Method %OnClose() As %Status [ Private ]
{
	try {
		do ..gvc.FreeLibrary()
		do ..cgraph.FreeLibrary()
	} catch ex {
		do ex.Log()
		return ex.AsStatus()
	}
	Quit $$$OK
}

Method DrawRing(path As %String)
{
	try {
		set colors = "red,green,blue,black,gold,cyan,magenta,yellow,coral,indigo,grey,crimson"

		set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#UCHAR, ..cgraph.#POINTER)
		set name = ..cgraph.ConvertStringToPointer("CNA graph")
		set graph = ..cgraph.CallFunction("agopen", ..cgraph.#POINTER, argTypes, name, 9, ..cgraph.NULL)

		set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#INT)
		set name = ..cgraph.ConvertStringToPointer("0")
		set startNode = ..cgraph.CallFunction("agnode", ..cgraph.#POINTER, argTypes, graph, name, 1)
	
		set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#INT, ..cgraph.#POINTER, ..cgraph.#POINTER)
		set name = ..cgraph.ConvertStringToPointer("color")
		set color = ..cgraph.ConvertStringToPointer("black")
		do ..cgraph.CallFunction("agattr", ..cgraph.#POINTER, argTypes, graph, 2, name, color)

		set oldNode = startNode

		for i=1:1:11 {
			set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#INT)
			set name = ..cgraph.ConvertStringToPointer(i)
			set newNode = ..cgraph.CallFunction("agnode", ..cgraph.#POINTER, argTypes, graph, name, 1)

			set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#INT)
			set edge = ..cgraph.CallFunction("agedge", ..cgraph.#POINTER, argTypes, graph, oldNode, newNode, ..cgraph.NULL, 1)

			set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#POINTER)
			set name = ..cgraph.ConvertStringToPointer("color")
			set color = ..cgraph.ConvertStringToPointer($p(colors, ",", $r(12) + 1))
			do ..cgraph.CallFunction("agset", ..cgraph.#INT, argTypes, edge, name, color)

			set oldNode = newNode
		}

		set argTypes = $lb(..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#POINTER, ..cgraph.#INT)
		set edge = ..cgraph.CallFunction("agedge", ..cgraph.#POINTER, argTypes, graph, oldNode, startNode, ..cgraph.NULL, 1)
	
		set gvc = ..gvc.CallFunction("gvContext", ..gvc.#POINTER)
		
		set argTypes = $lb(..gvc.#POINTER, ..gvc.#POINTER, ..gvc.#POINTER)
		set layout = ..gvc.ConvertStringToPointer("neato")
		do ..gvc.CallFunction("gvLayout", ..gvc.#INT, argTypes, gvc, graph, layout)

		set $li(argTypes, *+1) = ..gvc.#POINTER
		set format = ..gvc.ConvertStringToPointer("svg")
		set file = ..gvc.ConvertStringToPointer(path)
		do ..gvc.CallFunction("gvRenderFilename", ..gvc.#INT, argTypes, gvc, graph, format, file)

		set argTypes = $lb(..gvc.#POINTER, ..gvc.#POINTER)
		do ..gvc.CallFunction("gvFreeLayout", ..gvc.#INT, argTypes, gvc, graph)

		set argTypes = $lb(..gvc.#POINTER)
		do ..gvc.CallFunction("gvFreeContext", ..gvc.#INT, argTypes, gvc)
		do ..cgraph.CallFunction("agclose", ..cgraph.#INT, argTypes, graph)
	} catch ex {
		write $system.Status.GetErrorText(ex.AsStatus()),!
	}
}

}

